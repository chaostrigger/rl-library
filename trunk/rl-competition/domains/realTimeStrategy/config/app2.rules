# $Id: app2.rules 5582 2007-08-05 03:16:58Z mburo $

# This is an ORTS file (c) Michael Buro, licensed under the GPL

# input from app.mk:
#
# APP             : application name
# APP_DIR         : application directory
# APP_SOURCES     : local source files to build APP (*_main.* will be filtered out!)
# APP_LIBS        : ORTS library dependencies
# APP_EXT_HD      : external library header directories (-I ...)
# APP_EXT_LIBS    : external library dependencies (-L... -l...)

# input from lib.mk: 
#
# LIB_EXT_HD      :  external library header directories (-I ...)
# LIB_EXT_LIBS    :  external library dependencies (-L... -l...)


#$(warning "::: parameters: " $(APP) $(APP_DIR) sources="$(APP_SOURCES)" libs="$(APP_LIBS)")

# output:
#
# - adds application APP to APP_LIST
# - creates rule to link bin/$(APP)
# - includes dependency files for APP

APP_LIST := $(APP_LIST) $(APP)

#Btanner change to build in the /system/bin directory
APP_EXEC := ../../system/bin/$(APP)

HERE := apps/$(APP_SDIRS)/src/

# compute list of library .o files

DEP_DIRS  := $(patsubst %, libs/%/src, $(APP_LIBS))

FILES     := $(foreach dir, $(DEP_DIRS), $(wildcard $(dir)/*))
$(eval $(call create_O_FILES))
APP_LIB_OBJS := $(addprefix $(OBJ)/, $(O_FILES))

LIB_EXT_LIBS := 
FILES := $(foreach dir, $(DEP_DIRS), $(dir)/lib.mk)

include $(FILES)
# $(warning "LIB_EXT_LIBS=" $(LIB_EXT_LIBS))

# $(warning $(APP_LIB_OBJS))

# compute list of local .o files

FILES := $(APP_SOURCES)
$(eval $(call create_O_FILES))
APP_MAIN := apps.$(APP).src.$(notdir $(subst .,/,$(APP)))_main
APP_LOCAL_OBJS := $(OBJ)/$(APP_MAIN).o $(addprefix $(OBJ)/, $(O_FILES))

# create a list of rules for each subdirectory (see definition in makefile)

$(foreach dir,$(APP_LIBS),$(eval $(call create_sublib_rules,$(dir))))
$(foreach dir,$(APP_LIST),$(eval $(call create_subapp_rules,$(dir))))

# trigger gch compilation and linking

$(APP) : $(CONFIG)/$(ALLGCHMODE) link_gch $(APP_EXEC)
LOC_$(APP)_LIBS := $(APP_EXT_LIBS) $(LIB_EXT_LIBS)

#$(warning ">>>>> RULE:" $(APP_EXEC) : $(APP_LOCAL_OBJS) $(APP_LIB_OBJS) )
#$(warning ">>>>> APP_EXT_LIBS:  " $(APP_EXT_LIBS) )
#$(warning ">>>>> LIBP_EXT_LIBS: " $(LIB_EXT_LIBS) )
#$(warning ">>>>> SHARED_LIBS:   " $(SHARED_LIBS)  )
#$(warning LOCAL: $(LOC_LIBS))

# trick: use $@ to deduce application name and refer to dynamic variable LOC_$(APP)_LIBS
# whose contents is available at command execution time

$(APP_EXEC) : $(APP_LOCAL_OBJS) $(APP_LIB_OBJS)
	@ echo "### linking $@"
	$(VERBOSE) $(LD) $(LDOPTS) -o $@ $^ $(SHARED_LIBS) $(LOC_$(subst bin/,,$@)_LIBS)

# include dependency files if make goals are empty or a goal not in EXCL_INC is passed

DEP_FILES := $(notdir $(APP_LOCAL_OBJS) $(APP_LIB_OBJS))

#$(warning !!!!!!!!!!!! DEP_FILES= $(DEP_FILES)  $(addprefix $(DEP)/,$(DEP_FILES:.o=.d)))

ifeq ("$(MAKECMDGOALS)","")
-include $(addprefix $(DEP)/, $(DEP_FILES:.o=.d))
else
ifneq ("$(filter-out $(EXCL_INC),$(MAKECMDGOALS))", "")
-include $(addprefix $(DEP)/, $(DEP_FILES:.o=.d))
endif
endif
