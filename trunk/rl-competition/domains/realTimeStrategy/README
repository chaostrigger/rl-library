
ortslite is a simple stripped-down implementation of an RTS 
(Real-time Strategy) game. 

To compile ortslite: 

  1. Install dependencies:

     - boost >= 1.33

       If running on a Linux system, this is probably already done
       for you. Try building the boost test in misc/boost_test. If it
       compiles and runs, then boost is already installed. 

         cd misc
         tar xjvf boost-1_34_1.tar.bz2
         cd boost-1_34_1
         ./configure --prefix=$HOME
         make
         make install

       If you see a message indicating that not all the libraries were
       built properly, that is OK. It is likely that the optional python
       libraries were not built. 

       Lastly, create this symbolic link. 

         cd $HOME/include
         ln -s boost-1_34_1/boost

       Now, build and run the test program in misc/boost_test to verify
       that it worked. 

     - SDL (optional)

       SDL is needed for server-side visualization, which may be helpful for debugging
       but is not required. See the makefile for how to enable/disable compiling with
       SDL graphics. 

       To install SDL, please follow the instructions at http://www.libsdl.org/

  2. Set the OSTYPE variable. Supported values are LINUX and DARWIN. It is recommended
     to set this environment variable in your shell's startup script. 

       export OSTYPE="LINUX"

  2. If it's the first time compiling the software:

       make init

  3. Try making the ol app:

       make

     This will create bin/ol 

For information on how the RL-Glue applications work, please 
see README.rlglue. 

The structure of ortslite is as follows: 

  Applications
  ------------

  Aplications are under the apps/ subdirectory. An application is a set of
  source files which are used to create a binary executable file. Each
  application is built by invoking

     make <app name> 
  
  which creates bin/<app name> . 
  
  Every application under the apps/ directory must have a src/ directory 
  which has source files with extentions .C and .H. Every .C will be 
  compiled when the app is built. 
  
  The file 'app.mk' describes the application. The name of the application 
  is in this file, for instance. Dependencies between other shared source 
  files (libraries) are also handled by this file. 

  Libraries
  ---------

  Libraries are collections of source code, each under a subdirectory of 
  lib/ intended to be shared among one or more applications. Libraries are
  essentially collections of classes and/or functions that help an 
  application do what it needs to do. Most of the code for any application
  should be in a library; the application should just contain code that 
  drives the actual execution. 

  Libraries do not have dependencies between each other. They can be used
  in conjunction, though. One library can use functionality from a 
  different library, for instance. The kernel library contains a lot of 
  generally useful functions which most libraries use. Note, however, that
  library dependencies are specified in the particular application being 
  built which must include all the libraries that each depend on. For 
  example, if the ai library depends on code from the kernel library, the
  application must list kernel and ai as dependencies. 



