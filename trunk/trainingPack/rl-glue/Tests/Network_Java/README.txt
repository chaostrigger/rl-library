This example is to show how RL-Glue can be used to compile your agent, environment and experiment separately and use sockets to communicate with the RL-Glue. This socketed approach to compilation provides an advantage in two ways. Firstly, the pieces can be plugged in and out and easily swapped with other authors. Secondly, the different pieces can be on different computers and connect to the Glue over the internet. 

This example includes a SarsaAgent, the Mines environment and a generic experiment program.  To compile the project and run it you will need to type make in your terminal. This will cause the script in the makefile to run and compile the sample agent, environment, experiment, and the RL-Glue.  The RL_glue executable will be placed in your bin/ folder, as will a number of java class files, and a directory called "rlglue".  The directory is the RL-Glue java package, which is used to separate Java RL-Glue code from user code.  From your bin/ folder type ./RL_glue to start the glue.  Starting the experiment is as simple as typing java Experiment.  Agents and environments do not contain their own "main", and so are loaded into an existing binary that manages network communication for them.  To start the agent type "java AgentLoader SarsaAgent", and to start the environment type "java EnvironmentLoader Mines"

You can change the compiler by changing the CC variable. You can remove or add any compiler flags you like (CFLAGS) however you must leave in -I$(RL-GLUE) so the compiler knows to look for code in the RL-Glue directory. If you move this experiment folder to another part of your computer, ensure your RL-GLUE variable in the makefile still points to where the RL-Glue directory is located. 

Good luck! Feel free to modify and borrow bits of this code for your own agents, environments and experiments. 
