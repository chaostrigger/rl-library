RL-Competition Technical Committee Distribution-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=To compile everything, environments and experiments, as well as RL-Glue, type "make" in the main directory of the download. This can also be used to rebuild all the components at once. Provided examples:Agents:	- Dynamically Sizing Generic Sarsa Lambda (java)	- RandomAgentCPP (C)Environments:	- MountainCar	- Tetrlais (a Tetris like game)There are multiple ways to run experiments.  There is a visualizer written in java, which can be used to run experiments with visualization.  Alternatively, you can run a console C++ experiment program, or a console Java experiment program that can pop up the visualizer programatically at runtime.There are two options for running an experiment: RunVis or RunTrainer. If you run the visualizer, you will be able to watch the agent drive the car up the mountain or play tetrlais the entire time. If you use the Java Trainer the agent will run for 1000 episodes and then open the visualizer to display the agent's performance for a short period, it will then train without the visualizer for a period and again display the agent's performance on the visualizer for a short period. If you use the C trainer, the visualizer is never opened. The agent will run for a number of episodes (possibly printing out details about the runs/ current position etc. depending upon the environment) and print out it's results. These programs are given as examples so you can see how to write your own experiment programs if you desire.

Using the Java trainer/C++ trainer:
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
If you are using either the C++ or Java trainer, you will need to edit the appropriate file to specify which environment you would like to run. 
For the C++ trainer, edit this file:	- src/trainingExperiments/trainCpp/trainCpp.cppFor the Java Trainer, edit this file:	- src/trainingExperiments/trainJava/JavaTrainer.cpp
In both, the first line in the main function is declaring a string named theEnv. Change this string to contain the name of the environment you want to test. Remember to remake this file.

Java Trainer:
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
To run the Java Trainer with the sample agent from within the techDist directory, type::$ ./runTrainer.bashTo run the Java Trainer with a different agent from the techDist directory, type::$ ./runTrainerWithoutAgent.bash


And then run the executable for your own agent. If you wanted to use the sample random agent, you can run the following commands after running the TrainerWithoutAgent bash script.

:$ cd src/agents/RandomAgentCPP:$ make:$ cd bin/:$ ./RL_agent



Using the Visualizer:
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=To run the Visualizer as is, with the provided Generic Sarsa Lambda agent, please use the following command in your terminal:":$ ./runVis.bash" from inside the techDist directory.This will bring up the visualizer where you can select which environment to run and then start the experiment.To run the visualizer with the provided C agent with the provided environments and experimentsfollow these steps starting in the techDist directory::$ ./runVisWithoutAgent.bash:$ cd src/agents/RandomAgentCPP:$ make:$ cd bin/:$ ./RL_agentTo use your own agent, again you need to execute the runVisWIthoutAgent bash script. Before or after this point you can run your own agent executable and it will connect and run.:$ ./runVisWithoutAgent.bash:$ ./"your_agent_name_here"Included source files:In the ./techDist/src/ folder, there will be three folders, agents, environments and experiments each containing examples. Within the agents folder, there is an example of a Java and a C++ agent. GenericSarsaLambda is a sample generic sarsa lambda agent which works in domains with 1 discrete action variable and an unrestricted number of discrete and continuous observation variables. RandomAgentCPP is the sample C++ agent which implements no learning and behaves randomly, but does not have restrictions on the action representation. There are two sample environments provided in the ./src/environments folder: mountainCar and Tetrlais (Tetris). Modifying MountainCar.java will enable you to change the MountainCar environment. Similarly, the Tetris environment can be modified by modifying the src in the Tetrlais directory. For example, new pieces can be created in Tetris by adding code to TetrlaisPiece.java, then adding the needed code (to add them to the visualization) in Tetrlais.java .